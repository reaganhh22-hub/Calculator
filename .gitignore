import React, { useState } from "react";

export default function App() {
  const [tab, setTab] = useState("calc"); // "calc" | "pricing"

  // ======= CALCULATIONS TAB: 1–4 spreadsheet-style inputs =======
  const [rows, setRows] = useState([
    { BW: "", BF: "", LEA: "", DP: "", MS: "" },
    { BW: "", BF: "", LEA: "", DP: "", MS: "" },
    { BW: "", BF: "", LEA: "", DP: "", MS: "" },
    { BW: "", BF: "", LEA: "", DP: "", MS: "" }
  ]);

  const toNum = (v) => {
    const n = parseFloat(String(v ?? "").trim());
    return Number.isFinite(n) ? n : NaN;
  };

  // LRBF from BF using interval (no rounding)
  const computeLRBF = (bf) => {
    if (!Number.isFinite(bf)) return NaN;
    let adj = 0;
    if (bf <= 0.7) adj = 0.25;
    else if (bf < 0.8) adj = 0.25;
    else if (bf < 0.9) adj = 0.20;
    else if (bf < 1.0) adj = 0.15;
    else if (bf < 1.1) adj = 0.10;
    else if (bf < 1.2) adj = 0.05;
    else if (bf < 1.3) adj = 0.00;
    else adj = -0.05;
    return bf + adj;
  };

  // === HARD-CODED DP Chart (HCW x %FFL -> Adjusted DP (decimal multiplier)) ===
  // FFL columns in EXACT order from your header: 58+, 56–57.9, 54–55.9, 52–53.9, 50–51.9, 48–49.9, 46–47.9, 44–45.9, <44
  const dpChart = {
    fflBins: [
      { min: 58, max: Infinity },
      { min: 56, max: 57.9 },
      { min: 54, max: 55.9 },
      { min: 52, max: 53.9 },
      { min: 50, max: 51.9 },
      { min: 48, max: 49.9 },
      { min: 46, max: 47.9 },
      { min: 44, max: 45.9 },
      { min: -Infinity, max: 44 }
    ],
    // HCW rows in EXACT order from your left axis
    // <149, 150–159, 160–169, 170–179, 180–189, 190–199 (assumed), 200–209, 210–219, 220–229, 230–239, 240–250, >250
    hcwBins: [
      { min: -Infinity, max: 149 },
      { min: 150, max: 159.9 },
      { min: 160, max: 169.9 },
      { min: 170, max: 179.9 },
      { min: 180, max: 189.9 },
      { min: 190, max: 199.9 },
      { min: 200, max: 209.9 },
      { min: 210, max: 219.9 },
      { min: 220, max: 229.9 },
      { min: 230, max: 239.9 },
      { min: 240, max: 250 }, // inclusive upper edge
      { min: 250.000001, max: Infinity }
    ],
    // VALUES as DECIMALS (e.g., 0.93 = 93%), rows x cols to match bins order
    values: [
      // <149
      [0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.68, 0.68, 0.65],
      // 150–159
      [0.93, 0.95, 1.00, 0.97, 0.94, 0.94, 0.92, 0.89, 0.82],
      // 160–169
      [0.97, 1.00, 1.00, 1.00, 0.98, 0.97, 0.97, 0.90, 0.83],
      // 170–179
      [1.00, 1.02, 1.02, 1.00, 1.00, 1.00, 0.98, 0.91, 0.84],
      // 180–189
      [1.00, 1.02, 1.04, 1.02, 1.00, 1.00, 0.98, 0.91, 0.84],
      // 190–199 (assumed from duplicate 180–189 row)
      [1.02, 1.04, 1.04, 1.04, 1.02, 1.00, 0.98, 0.91, 0.84],
      // 200–209
      [1.02, 1.04, 1.06, 1.06, 1.04, 1.02, 0.98, 0.91, 0.84],
      // 210–219
      [1.02, 1.06, 1.06, 1.06, 1.04, 1.02, 0.98, 0.90, 0.83],
      // 220–229
      [1.02, 1.04, 1.04, 1.04, 1.02, 1.00, 0.95, 0.88, 0.81],
      // 230–239
      [1.00, 1.02, 1.02, 1.02, 1.00, 0.98, 0.92, 0.85, 0.78],
      // 240–250
      [0.95, 1.00, 1.00, 0.98, 0.96, 0.93, 0.88, 0.81, 0.74],
      // >250
      [0.95, 0.95, 0.94, 0.92, 0.90, 0.88, 0.83, 0.76, 0.69]
    ]
  };

  const binIndex = (bins, x) => {
    if (!Number.isFinite(x)) return -1;
    for (let i = 0; i < bins.length; i++) {
      const { min, max } = bins[i];
      const last = i === bins.length - 1;
      if (x >= min && (last ? x <= max : x < max)) return i;
    }
    return -1;
  };

  const lookupAdjustedDP = (hcw, ffl) => {
    const i = binIndex(dpChart.hcwBins, hcw);
    const j = binIndex(dpChart.fflBins, ffl);
    if (i < 0 || j < 0) return NaN;
    const val = dpChart.values?.[i]?.[j];
    return Number.isFinite(val) ? val : NaN; // decimal multiplier
  };

  const derive = (r) => {
    const BW = toNum(r.BW);
    const BF = toNum(r.BF);
    const LEA = toNum(r.LEA);
    let DP = toNum(r.DP);
    const MS = toNum(r.MS);

    if (Number.isFinite(DP) && DP > 1) DP = DP / 100; // accept 75 or 0.75

    const LRBF = computeLRBF(BF);
    const HCW  = Number.isFinite(BW) && Number.isFinite(DP) ? BW * DP : NaN;
    const FFL  = Number.isFinite(BF) && Number.isFinite(LEA) ? 54.5 - (11.9 * BF) + (1.1 * LEA) : NaN;
    const USDA = Number.isFinite(LRBF) && Number.isFinite(MS) ? (4 * LRBF) - MS : NaN;

    const ADJDP_DEC = Number.isFinite(HCW) && Number.isFinite(FFL) ? lookupAdjustedDP(HCW, FFL) : NaN; // decimal

    return {
      LRBF: Number.isFinite(LRBF) ? +LRBF.toFixed(3) : "—",
      HCW:  Number.isFinite(HCW)  ? +HCW.toFixed(2)  : "—",
      FFL:  Number.isFinite(FFL)  ? +FFL.toFixed(2)  : "—",
      USDA: Number.isFinite(USDA) ? +USDA.toFixed(2) : "—",
      ADJDP_DEC,
      ADJDP: Number.isFinite(ADJDP_DEC) ? `${(ADJDP_DEC*100).toFixed(2)}%` : "—"
    };
  };

  const updateCell = (i, field, val) => {
    setRows((prev) => prev.map((r, idx) => (idx === i ? { ...r, [field]: val } : r)));
  };

  const resetCalc = () =>
    setRows([
      { BW: "", BF: "", LEA: "", DP: "", MS: "" },
      { BW: "", BF: "", LEA: "", DP: "", MS: "" },
      { BW: "", BF: "", LEA: "", DP: "", MS: "" },
      { BW: "", BF: "", LEA: "", DP: "", MS: "" }
    ]);

  // ======= PRICING TAB =======
  const [pen, setPen] = useState([]); // { HCW, FFL, ADJDP }
  const [pricingInputs, setPricingInputs] = useState({ baseDpPriceCwt: "", standardizedDp: "" });
  const [pricingResults, setPricingResults] = useState(null);

  const addAllToPen = () => {
    const computed = rows
      .map((r) => {
        const d = derive(r);
        return d.HCW !== "—" && d.FFL !== "—" && Number.isFinite(d.ADJDP_DEC)
          ? { HCW: d.HCW, FFL: d.FFL, ADJDP: d.ADJDP_DEC }
          : null;
      })
      .filter(Boolean);

    if (!computed.length) {
      alert("Need valid HCW and %FFL (to derive Adj DP from the chart) to add to pen.");
      return;
    }
    setPen(computed);
  };

  const handlePricingChange = (e) => {
    const { name, value } = e.target;
    setPricingInputs((p) => ({ ...p, [name]: value }));
  };

  const onCalculatePricing = () => {
    if (!pen.length) {
      alert("Add animals to the pen from Calculations.");
      return;
    }

    const baseDpPriceCwt = toNum(pricingInputs.baseDpPriceCwt);
    let standardizedDp = toNum(pricingInputs.standardizedDp);
    if (!Number.isFinite(baseDpPriceCwt) || !Number.isFinite(standardizedDp)) {
      alert("Pricing inputs must be numeric.");
      return;
    }
    if (standardizedDp > 1) standardizedDp = standardizedDp / 100; // accept 75 or 0.75

    const avgAdjDp = pen.reduce((s, a) => s + a.ADJDP, 0) / pen.length; // decimal
    const carcassPricePerCwt = baseDpPriceCwt * avgAdjDp;             // $/cwt
    const livePricePerCwt = carcassPricePerCwt * standardizedDp;      // $/cwt

    const avgHCW = pen.reduce((s, a) => s + a.HCW, 0) / pen.length;
    const carcassValue = (avgHCW / 100) * carcassPricePerCwt;          // $/head (avg)

    setPricingResults({
      avgAdjDp: +(avgAdjDp * 100).toFixed(2),
      carcassPricePerCwt: +carcassPricePerCwt.toFixed(2),
      livePricePerCwt: +livePricePerCwt.toFixed(2),
      carcassValue: +carcassValue.toFixed(2)
    });
  };

  // --- RENDER ---
  return (
    <div style={{ padding: 24, fontFamily: "Inter, system-ui, Arial, sans-serif", maxWidth: 1150, color: "#ffffff", background: "#111827", minHeight: "100vh" }}>
      <h1 style={{ marginBottom: 12, color: "#ffffff" }}>Pork Evaluation Calculator</h1>

      {/* Tabs (high contrast) */}
      <div style={{ display: "flex", gap: 8, background: "#0f172a", padding: 6, borderRadius: 12, marginBottom: 16 }}>
        <TabButton id="calc" tab={tab} setTab={setTab}>Calculations</TabButton>
        <TabButton id="pricing" tab={tab} setTab={setTab}>Pricing</TabButton>
      </div>

      {tab === "calc" && (
        <div>
          <p style={{ color: "#ffffff", marginBottom: 12 }}>
            Spreadsheet-style input for <b>four head</b>. Enter numbers; derived columns update automatically. DP accepts <b>0.75</b> or <b>75</b>.
          </p>

          <div style={{ overflowX: "auto", border: "1px solid #374151", borderRadius: 10 }}>
            <table style={{ borderCollapse: "collapse", width: "100%", minWidth: 980 }}>
              <thead>
                <tr>
                  <Th dark>#</Th>
                  <Th dark>BW (lb)</Th>
                  <Th dark>BF (in)</Th>
                  <Th dark>LEA (in²)</Th>
                  <Th dark>DP</Th>
                  <Th dark>MS</Th>
                  <Th dark>Adj DP (%)</Th>
                  <Th dark>LRBF (in)</Th>
                  <Th dark>HCW (lb)</Th>
                  <Th dark>%FFL</Th>
                  <Th dark>USDA</Th>
                </tr>
              </thead>
              <tbody>
                {rows.map((r, i) => {
                  const d = derive(r);
                  return (
                    <tr key={i}>
                      <Td>{i + 1}</Td>
                      <Td><Cell value={r.BW} onChange={(v) => updateCell(i, "BW", v)} placeholder="280" /></Td>
                      <Td><Cell value={r.BF} onChange={(v) => updateCell(i, "BF", v)} placeholder="0.85" /></Td>
                      <Td><Cell value={r.LEA} onChange={(v) => updateCell(i, "LEA", v)} placeholder="6.5" /></Td>
                      <Td><Cell value={r.DP} onChange={(v) => updateCell(i, "DP", v)} placeholder="0.75 or 75" /></Td>
                      <Td><Cell value={r.MS} onChange={(v) => updateCell(i, "MS", v)} placeholder="2.5" /></Td>
                      <Td>{d.ADJDP}</Td>
                      <Td>{d.LRBF}</Td>
                      <Td>{d.HCW}</Td>
                      <Td>{d.FFL}</Td>
                      <Td>{d.USDA}</Td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          <div style={{ marginTop: 12, display: "flex", gap: 8, flexWrap: "wrap" }}>
            <button onClick={resetCalc} style={styles.btnSecondary}>Clear Table</button>
            <button onClick={addAllToPen} style={styles.btnPrimary}>Add All to Pen</button>
          </div>
        </div>
      )}

      {tab === "pricing" && (
        <div>
          <p style={{ color: "#ffffff", marginBottom: 8 }}>
            Average DP = mean of the <b>Adj DP (%)</b> (from the chart) for animals in the pen.
          </p>

          <div style={{ marginTop: 8 }}>
            <h3 style={{ marginTop: 0, color: "#ffffff" }}>Pen</h3>
            {!pen.length && <p style={{ color: "#9ca3af" }}>No animals yet. On Calculations → Add All to Pen.</p>}
            {pen.length > 0 && (
              <div style={{ overflowX: "auto", border: "1px solid #374151", borderRadius: 10 }}>
                <table style={{ borderCollapse: "collapse", minWidth: 560, width: "100%" }}>
                  <thead>
                    <tr>
                      <Th dark>#</Th>
                      <Th dark>HCW (lb)</Th>
                      <Th dark>%FFL</Th>
                      <Th dark>Adj DP (%)</Th>
                    </tr>
                  </thead>
                  <tbody>
                    {pen.map((a, i) => (
                      <tr key={i}>
                        <Td>{i + 1}</Td>
                        <Td>{a.HCW}</Td>
                        <Td>{a.FFL}</Td>
                        <Td>{(a.ADJDP * 100).toFixed(2)}%</Td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>

          <div style={{ marginTop: 16, display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(260px, 1fr))", gap: 12, maxWidth: 820 }}>
            <LabeledInput
              name="baseDpPriceCwt"
              value={pricingInputs.baseDpPriceCwt}
              onChange={handlePricingChange}
              label="Base DP Price ($/cwt)"
              placeholder="90"
            />
            <LabeledInput
              name="standardizedDp"
              value={pricingInputs.standardizedDp}
              onChange={handlePricingChange}
              label="Standardized DP (decimal or %)"
              placeholder="0.75 or 75"
            />
          </div>

          <div style={{ marginTop: 12 }}>
            <button onClick={onCalculatePricing} style={styles.btnPrimary}>Calculate Pricing</button>
          </div>

          {pricingResults && (
            <div style={{ marginTop: 18, display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(240px, 1fr))", gap: 12 }}>
              <Card title="Avg Adjusted DP (%)" value={pricingResults.avgAdjDp} />
              <Card title="Carcass Price ($/cwt)" value={pricingResults.carcassPricePerCwt} />
              <Card title="Live Price ($/cwt)" value={pricingResults.livePricePerCwt} />
              <Card title="Carcass Value ($/head)" value={pricingResults.carcassValue} />
            </div>
          )}
        </div>
      )}
    </div>
  );
}

// ===== Helpers / UI bits =====
const Cell = ({ value, onChange, placeholder }) => (
  <input
    type="text"
    inputMode="decimal"
    value={value}
    onChange={(e) => onChange(e.target.value)}
    placeholder={placeholder}
    style={{ width: "100%", padding: "6px 8px", border: "1px solid #475569", borderRadius: 8, background: "#0f172a", color: "#f9fafb" }}
  />
);

const Th = ({ children, dark }) => (
  <th
    style={{
      border: "1px solid #374151",
      padding: 10,
      background: dark ? "#0f172a" : "#1f2937",
      color: "#f9fafb",
      textAlign: "left",
      whiteSpace: "nowrap"
    }}
  >
    {children}
  </th>
);

const Td = ({ children }) => (
  <td style={{ border: "1px solid #374151", padding: 8, verticalAlign: "middle", color: "#ffffff" }}>{children}</td>
);

const LabeledInput = ({ label, name, value, onChange, placeholder }) => (
  <div>
    <label style={{ display: "block", fontWeight: 600, marginBottom: 4, color: "#ffffff" }}>{label}</label>
    <input
      name={name}
      value={value}
      onChange={onChange}
      inputMode="decimal"
      placeholder={placeholder}
      style={{ width: "100%", maxWidth: 360, padding: "8px 10px", borderRadius: 8, border: "1px solid #475569", background: "#0f172a", color: "#f9fafb" }}
    />
  </div>
);

const Card = ({ title, value }) => (
  <div style={{ padding: 14, border: "1px solid #374151", borderRadius: 8, background: "#0b1220", color: "#f9fafb" }}>
    <div style={{ fontSize: 12, color: "#cbd5e1", marginBottom: 4 }}>{title}</div>
    <div style={{ fontSize: 20, fontWeight: 700 }}>{value}</div>
  </div>
);

function TabButton({ id, tab, setTab, children }) {
  const active = tab === id;
  return (
    <button
      onClick={() => setTab(id)}
      style={{
        padding: "8px 14px",
        border: "1px solid #1f2937",
        background: active ? "#f59e0b" : "transparent",
        color: active ? "#111827" : "#e5e7eb",
        fontWeight: 800,
        borderRadius: 8,
        boxShadow: active ? "inset 0 -2px 0 rgba(0,0,0,0.35)" : "none",
        cursor: "pointer"
      }}
    >
      {children}
    </button>
  );
}

const styles = {
  btnPrimary: {
    padding: "8px 14px",
    borderRadius: 8,
    border: "1px solid #2563eb",
    background: "#3b82f6",
    color: "#0b1220",
    fontWeight: 700,
    cursor: "pointer"
  },
  btnSecondary: {
    padding: "8px 14px",
    borderRadius: 8,
    border: "1px solid #9ca3af",
    background: "#374151",
    color: "#f9fafb",
    cursor: "pointer"
  }
};
